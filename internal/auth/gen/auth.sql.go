// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package authdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    email,
    password_hash,
    role
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, username, email, role, created_at
`

type CreateUserParams struct {
	Username     string   `db:"username"`
	Email        string   `db:"email"`
	PasswordHash string   `db:"password_hash"`
	Role         UserRole `db:"role"`
}

type CreateUserRow struct {
	ID        pgtype.UUID      `db:"id"`
	Username  string           `db:"username"`
	Email     string           `db:"email"`
	Role      UserRole         `db:"role"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getPasswordHashByUsername = `-- name: GetPasswordHashByUsername :one
SELECT password_hash FROM users WHERE username = $1
`

func (q *Queries) GetPasswordHashByUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, getPasswordHashByUsername, username)
	var password_hash string
	err := row.Scan(&password_hash)
	return password_hash, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, role, created_at FROM users WHERE email = $1
`

type GetUserByEmailRow struct {
	ID        pgtype.UUID      `db:"id"`
	Username  string           `db:"username"`
	Email     string           `db:"email"`
	Role      UserRole         `db:"role"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, role, created_at FROM users WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID        pgtype.UUID      `db:"id"`
	Username  string           `db:"username"`
	Email     string           `db:"email"`
	Role      UserRole         `db:"role"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
